// server.js
import express from 'express';
import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();
const app = express();
app.use(express.json());

// Approve payment
app.post('/payments/approve', async (req, res) => {
  const { paymentId } = req.body;
  try {
    const response = await axios.post(
      `https://api.minepi.com/v2/payments/${paymentId}/approve`,
      {},
      {
        headers: {
          Authorization: `Key ${process.env.PI_API_KEY}`,
        },
      }
    );
    res.json({ status: 'approved', data: response.data });
  } catch (err) {
    console.error(err.response?.data || err.message);
    res.status(500).json({ error: 'Payment approval failed' });
  }
});

// Complete payment
app.post('/payments/complete', async (req, res) => {
  const { paymentId, txid } = req.body;
  try {
    const response = await axios.post(
      `https://api.minepi.com/v2/payments/${paymentId}/complete`,
      { txid },
      {
        headers: {
          Authorization: `Key ${process.env.PI_API_KEY}`,
        },
      }
    );
    res.json({ status: 'completed', data: response.data });
  } catch (err) {
    console.error(err.response?.data || err.message);
    res.status(500).json({ error: 'Payment completion failed' });
  }
});

app.listen(3000, () => console.log('Server running on port 3000'));
<script src="https://sdk.minepi.com/pi-sdk.js"></script>
<script>
  Pi.init({ version: "2.0", sandbox: true }); // sandbox:true for testing
  const scopes = ['payments','username'];

  function onIncompletePaymentFound(payment) { 
      console.log('incomplete payment found')
      const paymentId = payment.identifier;
      const txid = payment.transaction.txid;
      fetch('/payments/complete', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({paymentId, txid})
      });
  };

  Pi.authenticate(scopes, onIncompletePaymentFound)
    .then(auth => {
      console.log("Hi there! You're ready to make payments!");
      window.piAccessToken = auth.accessToken; // store for later
    })
    .catch(error => console.error(error));
/script>
import React, { useState } from 'react';

function App() {
  const [role, setRole] = useState('buyer');
  const [name, setName] = useState('');
  const [wallet, setWallet] = useState('');

  const handleRegister = (e) => {
    e.preventDefault();
    alert(`Registered as ${role} with wallet ${wallet}`);
    // You would send this to your backend to store
  };

  const handlePay = () => {
    // Payment data
    const paymentData = {
      amount: 0.01,
      memo: "Payment for goods",
      metadata: { role, name }
    };

    const onReadyForServerApproval = (paymentId) => {
      console.log("onReadyForServerApproval", paymentId);
      fetch('/payments/approve', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({paymentId})
      });
    };

    const onReadyForServerCompletion = (paymentId, txid) => {
      console.log("onReadyForServerCompletion", paymentId, txid);
      fetch('/payments/complete', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({paymentId, txid})
      });
    };

    const onCancel = (paymentId) => {
      console.log("onCancel", paymentId);
    };

    const onError = (error, payment) => {
      console.error("onError", error, payment);
    };

    Pi.createPayment(paymentData, {
      onReadyForServerApproval,
      onReadyForServerCompletion,
      onCancel,
      onError
    }).then(payment => {
      console.log(payment);
    }).catch(error => console.error(error));
  };

  return (
    <div className="App">
      <h1>Africa-China Trading Platform</h1>
      <form onSubmit={handleRegister}>
        <label>
          Role:
          <select value={role} onChange={e => setRole(e.target.value)}>
            <option value="buyer">Buyer</option>
            <option value="seller">Seller</option>
            <option value="warehouse">Warehouse Owner</option>
          </select>
        </label>
        <label>
          Name:
          <input value={name} onChange={e => setName(e.target.value)} required />
        </label>
        <label>
          Pi Wallet Address:
          <input value={wallet} onChange={e => setWallet(e.target.value)} required />
        </label>
        <button type="submit">Register</button>
      </form>
      <button onClick={handlePay}>Pay 0.01 Pi</button>
    </div>
  );
}

export default App;PI_API_KEY=your_real_key_here
cd backend
npm install
cp .env.example .env   # put your real key
npm run dev

cd client
npm install
npm start
